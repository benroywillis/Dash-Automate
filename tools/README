ReportGenerator.py: plots correlation of hotcode vs. PaMul kernel sizes (ie for each kernel the blocks present in that kernel are plotted, x axis is hotcode, y axis is PaMul
 - contains mechanisms to pick a file tree for all kernel files and map them to the corresponding project name

DirectoryStats.py: collects kernel stats of a specific automation run and collects them into a table. 
 - contains mappings from crude project names to refined ones
 - mechanism for retrieving all kernel files is similar to ReportGenerator.py, but the system is generalized beyond HC, 2DMarkov and Scops

PlotKernelCoverageStats.py: Reads "matched" data produced by ReportGenerator.py (data where all three tools, HC, PaMul and llvm polly scops have good results) and plots the coverage of the kernels, meaning the % of the program static basic blocks that have been covered by each respective tool

TimeDilationScript.py: mini version of Dash-Automate that collects information about timing (high precision, does not use SLURM), profile size, input graph nodes and edges, etc
 - must be run on individual projects, not the whole corpus (uses bash, can't overload one machine or else this will bias the data)
 - data can be read and plotted by PlotDilationResults.py
 - 20 jobs or less are allowed at a time

PlotDilationResults.py: plots information produced by TimeDilationScript.py runs into figures to show dilation of the profiler, transforms, file reads, segmentation tool
 - contains mechanism to read in each run file 

TransformationStats.py: contains plotting code for transformation stats (change in nodes, edges, entropy) before and after transforms

BasicBlockCorrespondence.py: Venn diagram of the static basic blocks covered by each of the structuring techniques (Hotcode, Hotloops, PaMul)

BasicBlockCoverageBars.py: Stacked bar chart of the static basic block % covered by each technique
 - x axis is applications
 - y axis is % of coverage of static blocks
 - stacked bars is the union of the coverage of all techniques. The lowest coverage technique is the bottom bar, 2nd is the middle bar, most coverage is the top bar

FOR JOHN:
Data:
  The data you will need to build your own figures are local to my copy of this repository: /home/bwilli46/Dash/Dash-Automate/tools/
  The files pertain to two scripts that generate figures:
	BasicBlockCorrespondence.py: mntheorot-10DashDash-Corpusbuild2-8-2022_hc95_data.json holds the kernel data, mntheorot-10DashDash-Corpusbuild2-8-2022_hc95_loops.json holds the static loop data
	BasicBlockCoverageBars.py: Coverage_mntheorot-10DashDash-Corpusbuild2-8-2022_hc95_data.json holds the kernel data, Coverage_mntheorot-10DashDash-Corpusbuild2-8-2022_hc95_loops.json holds the static loop data
  Format: 
	kernel data: { "<absolutePathToKernelFile>": [<blocks>], ... }
	coverage data: { "<absolutePathToKernelFile>": float, ... }
	loop data: { "<absolutePathToLoopFile>": [<blocks], ... }
	loop coverage data: { "<absolutePathToLoopFile>": float, ... }

RetrieveData.py:
	Has many methods in it to facilitate the data picking of a repository that contains automation builds.
	This is done by using a build folder name to pick the kernel and loop data that results in from the run.
	All data uses the absolute path of the file as its unique identifier.
	BasicBlockCorrespondence.py and BasicBlockCoverageBars.py contain scripts at the bottom that call the relevant methods

Examples:
	Use the scripts at the bottom of BasicBlockCorrespondence.py and BasicBlockCoverageBars.py as examples
